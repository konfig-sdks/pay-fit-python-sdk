# coding: utf-8

"""
    Partner API

    A Semi-Private API to let third parties communicate with PayFit

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_fit_python_sdk import schemas  # noqa: F401


class AccountingV2(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "accountId",
            "operationDate",
            "analyticCode",
            "accountName",
            "employeeFullName",
            "credit",
            "debit",
        }
        
        class properties:
            operationDate = schemas.DateSchema
            
            
            class analyticCode(
                schemas.StrBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneStrMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, str, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'analyticCode':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            employeeFullName = schemas.StrSchema
            accountId = schemas.StrSchema
            accountName = schemas.StrSchema
            
            
            class debit(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'debit':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class credit(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'credit':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "operationDate": operationDate,
                "analyticCode": analyticCode,
                "employeeFullName": employeeFullName,
                "accountId": accountId,
                "accountName": accountName,
                "debit": debit,
                "credit": credit,
            }
    
    accountId: MetaOapg.properties.accountId
    operationDate: MetaOapg.properties.operationDate
    analyticCode: MetaOapg.properties.analyticCode
    accountName: MetaOapg.properties.accountName
    employeeFullName: MetaOapg.properties.employeeFullName
    credit: MetaOapg.properties.credit
    debit: MetaOapg.properties.debit
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["operationDate"]) -> MetaOapg.properties.operationDate: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["analyticCode"]) -> MetaOapg.properties.analyticCode: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["employeeFullName"]) -> MetaOapg.properties.employeeFullName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["accountName"]) -> MetaOapg.properties.accountName: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["debit"]) -> MetaOapg.properties.debit: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["credit"]) -> MetaOapg.properties.credit: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["operationDate", "analyticCode", "employeeFullName", "accountId", "accountName", "debit", "credit", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["operationDate"]) -> MetaOapg.properties.operationDate: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["analyticCode"]) -> MetaOapg.properties.analyticCode: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["employeeFullName"]) -> MetaOapg.properties.employeeFullName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountId"]) -> MetaOapg.properties.accountId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["accountName"]) -> MetaOapg.properties.accountName: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["debit"]) -> MetaOapg.properties.debit: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["credit"]) -> MetaOapg.properties.credit: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["operationDate", "analyticCode", "employeeFullName", "accountId", "accountName", "debit", "credit", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        accountId: typing.Union[MetaOapg.properties.accountId, str, ],
        operationDate: typing.Union[MetaOapg.properties.operationDate, str, date, ],
        analyticCode: typing.Union[MetaOapg.properties.analyticCode, None, str, ],
        accountName: typing.Union[MetaOapg.properties.accountName, str, ],
        employeeFullName: typing.Union[MetaOapg.properties.employeeFullName, str, ],
        credit: typing.Union[MetaOapg.properties.credit, None, decimal.Decimal, int, float, ],
        debit: typing.Union[MetaOapg.properties.debit, None, decimal.Decimal, int, float, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'AccountingV2':
        return super().__new__(
            cls,
            *args,
            accountId=accountId,
            operationDate=operationDate,
            analyticCode=analyticCode,
            accountName=accountName,
            employeeFullName=employeeFullName,
            credit=credit,
            debit=debit,
            _configuration=_configuration,
            **kwargs,
        )
