# coding: utf-8

"""
    Partner API

    A Semi-Private API to let third parties communicate with PayFit

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_fit_python_sdk import schemas  # noqa: F401


class CollaboratorListMealVouchersResponseMealVouchersItem(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "voucherAmount",
            "voucherCompanyPartAmount",
            "dayOffEligibility",
            "voucherEmployeePartAmount",
            "vouchersCount",
            "collaboratorId",
        }
        
        class properties:
            collaboratorId = schemas.StrSchema
            vouchersCount = schemas.NumberSchema
            voucherAmount = schemas.NumberSchema
            dayOffEligibility = schemas.BoolSchema
            voucherCompanyPartAmount = schemas.NumberSchema
            voucherEmployeePartAmount = schemas.NumberSchema
            __annotations__ = {
                "collaboratorId": collaboratorId,
                "vouchersCount": vouchersCount,
                "voucherAmount": voucherAmount,
                "dayOffEligibility": dayOffEligibility,
                "voucherCompanyPartAmount": voucherCompanyPartAmount,
                "voucherEmployeePartAmount": voucherEmployeePartAmount,
            }
    
    voucherAmount: MetaOapg.properties.voucherAmount
    voucherCompanyPartAmount: MetaOapg.properties.voucherCompanyPartAmount
    dayOffEligibility: MetaOapg.properties.dayOffEligibility
    voucherEmployeePartAmount: MetaOapg.properties.voucherEmployeePartAmount
    vouchersCount: MetaOapg.properties.vouchersCount
    collaboratorId: MetaOapg.properties.collaboratorId
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["collaboratorId"]) -> MetaOapg.properties.collaboratorId: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["vouchersCount"]) -> MetaOapg.properties.vouchersCount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voucherAmount"]) -> MetaOapg.properties.voucherAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["dayOffEligibility"]) -> MetaOapg.properties.dayOffEligibility: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voucherCompanyPartAmount"]) -> MetaOapg.properties.voucherCompanyPartAmount: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["voucherEmployeePartAmount"]) -> MetaOapg.properties.voucherEmployeePartAmount: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["collaboratorId", "vouchersCount", "voucherAmount", "dayOffEligibility", "voucherCompanyPartAmount", "voucherEmployeePartAmount", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["collaboratorId"]) -> MetaOapg.properties.collaboratorId: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["vouchersCount"]) -> MetaOapg.properties.vouchersCount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voucherAmount"]) -> MetaOapg.properties.voucherAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["dayOffEligibility"]) -> MetaOapg.properties.dayOffEligibility: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voucherCompanyPartAmount"]) -> MetaOapg.properties.voucherCompanyPartAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["voucherEmployeePartAmount"]) -> MetaOapg.properties.voucherEmployeePartAmount: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["collaboratorId", "vouchersCount", "voucherAmount", "dayOffEligibility", "voucherCompanyPartAmount", "voucherEmployeePartAmount", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        voucherAmount: typing.Union[MetaOapg.properties.voucherAmount, decimal.Decimal, int, float, ],
        voucherCompanyPartAmount: typing.Union[MetaOapg.properties.voucherCompanyPartAmount, decimal.Decimal, int, float, ],
        dayOffEligibility: typing.Union[MetaOapg.properties.dayOffEligibility, bool, ],
        voucherEmployeePartAmount: typing.Union[MetaOapg.properties.voucherEmployeePartAmount, decimal.Decimal, int, float, ],
        vouchersCount: typing.Union[MetaOapg.properties.vouchersCount, decimal.Decimal, int, float, ],
        collaboratorId: typing.Union[MetaOapg.properties.collaboratorId, str, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'CollaboratorListMealVouchersResponseMealVouchersItem':
        return super().__new__(
            cls,
            *args,
            voucherAmount=voucherAmount,
            voucherCompanyPartAmount=voucherCompanyPartAmount,
            dayOffEligibility=dayOffEligibility,
            voucherEmployeePartAmount=voucherEmployeePartAmount,
            vouchersCount=vouchersCount,
            collaboratorId=collaboratorId,
            _configuration=_configuration,
            **kwargs,
        )
