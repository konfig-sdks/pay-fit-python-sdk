# coding: utf-8

"""
    Partner API

    A Semi-Private API to let third parties communicate with PayFit

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_fit_python_sdk import schemas  # noqa: F401


class TimeInformation(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)

    It will contain every information related to the time information
    """


    class MetaOapg:
        required = {
            "standardWeeklyHours",
            "fullTimeEquivalent",
            "isFullTime",
        }
        
        class properties:
            
            
            class standardWeeklyHours(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'standardWeeklyHours':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class fullTimeEquivalent(
                schemas.NumberBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneDecimalMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'fullTimeEquivalent':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            
            
            class isFullTime(
                schemas.BoolBase,
                schemas.NoneBase,
                schemas.Schema,
                schemas.NoneBoolMixin
            ):
            
            
                def __new__(
                    cls,
                    *args: typing.Union[None, bool, ],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'isFullTime':
                    return super().__new__(
                        cls,
                        *args,
                        _configuration=_configuration,
                    )
            __annotations__ = {
                "standardWeeklyHours": standardWeeklyHours,
                "fullTimeEquivalent": fullTimeEquivalent,
                "isFullTime": isFullTime,
            }
    
    standardWeeklyHours: MetaOapg.properties.standardWeeklyHours
    fullTimeEquivalent: MetaOapg.properties.fullTimeEquivalent
    isFullTime: MetaOapg.properties.isFullTime
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["standardWeeklyHours"]) -> MetaOapg.properties.standardWeeklyHours: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["fullTimeEquivalent"]) -> MetaOapg.properties.fullTimeEquivalent: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["isFullTime"]) -> MetaOapg.properties.isFullTime: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["standardWeeklyHours", "fullTimeEquivalent", "isFullTime", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["standardWeeklyHours"]) -> MetaOapg.properties.standardWeeklyHours: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["fullTimeEquivalent"]) -> MetaOapg.properties.fullTimeEquivalent: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["isFullTime"]) -> MetaOapg.properties.isFullTime: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["standardWeeklyHours", "fullTimeEquivalent", "isFullTime", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        standardWeeklyHours: typing.Union[MetaOapg.properties.standardWeeklyHours, None, decimal.Decimal, int, float, ],
        fullTimeEquivalent: typing.Union[MetaOapg.properties.fullTimeEquivalent, None, decimal.Decimal, int, float, ],
        isFullTime: typing.Union[MetaOapg.properties.isFullTime, None, bool, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'TimeInformation':
        return super().__new__(
            cls,
            *args,
            standardWeeklyHours=standardWeeklyHours,
            fullTimeEquivalent=fullTimeEquivalent,
            isFullTime=isFullTime,
            _configuration=_configuration,
            **kwargs,
        )
