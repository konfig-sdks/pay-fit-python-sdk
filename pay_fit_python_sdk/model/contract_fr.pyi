# coding: utf-8

"""
    Partner API

    A Semi-Private API to let third parties communicate with PayFit

    The version of the OpenAPI document: 1.0.0
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from pay_fit_python_sdk import schemas  # noqa: F401


class ContractFr(
    schemas.ComposedSchema,
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        
        
        class all_of_0(
            schemas.ComposedBase,
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                
                
                class all_of_0(
                    schemas.DictSchema
                ):
                
                
                    class MetaOapg:
                        required = {
                            "standardWeeklyHours",
                            "fullTimeEquivalent",
                            "isFullTime",
                        }
                        
                        class properties:
                            
                            
                            class standardWeeklyHours(
                                schemas.NumberBase,
                                schemas.NoneBase,
                                schemas.Schema,
                                schemas.NoneDecimalMixin
                            ):
                            
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'standardWeeklyHours':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        _configuration=_configuration,
                                    )
                            
                            
                            class fullTimeEquivalent(
                                schemas.NumberBase,
                                schemas.NoneBase,
                                schemas.Schema,
                                schemas.NoneDecimalMixin
                            ):
                            
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[None, decimal.Decimal, int, float, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'fullTimeEquivalent':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        _configuration=_configuration,
                                    )
                            
                            
                            class isFullTime(
                                schemas.BoolBase,
                                schemas.NoneBase,
                                schemas.Schema,
                                schemas.NoneBoolMixin
                            ):
                            
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[None, bool, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'isFullTime':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        _configuration=_configuration,
                                    )
                            __annotations__ = {
                                "standardWeeklyHours": standardWeeklyHours,
                                "fullTimeEquivalent": fullTimeEquivalent,
                                "isFullTime": isFullTime,
                            }
                    
                    standardWeeklyHours: MetaOapg.properties.standardWeeklyHours
                    fullTimeEquivalent: MetaOapg.properties.fullTimeEquivalent
                    isFullTime: MetaOapg.properties.isFullTime
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["standardWeeklyHours"]) -> MetaOapg.properties.standardWeeklyHours: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["fullTimeEquivalent"]) -> MetaOapg.properties.fullTimeEquivalent: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["isFullTime"]) -> MetaOapg.properties.isFullTime: ...
                    
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    
                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["standardWeeklyHours", "fullTimeEquivalent", "isFullTime", ], str]):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["standardWeeklyHours"]) -> MetaOapg.properties.standardWeeklyHours: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["fullTimeEquivalent"]) -> MetaOapg.properties.fullTimeEquivalent: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["isFullTime"]) -> MetaOapg.properties.isFullTime: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    
                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["standardWeeklyHours", "fullTimeEquivalent", "isFullTime", ], str]):
                        return super().get_item_oapg(name)
                    
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, ],
                        standardWeeklyHours: typing.Union[MetaOapg.properties.standardWeeklyHours, None, decimal.Decimal, int, float, ],
                        fullTimeEquivalent: typing.Union[MetaOapg.properties.fullTimeEquivalent, None, decimal.Decimal, int, float, ],
                        isFullTime: typing.Union[MetaOapg.properties.isFullTime, None, bool, ],
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'all_of_0':
                        return super().__new__(
                            cls,
                            *args,
                            standardWeeklyHours=standardWeeklyHours,
                            fullTimeEquivalent=fullTimeEquivalent,
                            isFullTime=isFullTime,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                
                class all_of_1(
                    schemas.DictSchema
                ):
                
                
                    class MetaOapg:
                        required = {
                            "jobName",
                            "companyId",
                            "contractId",
                            "startDate",
                            "collaboratorId",
                            "status",
                        }
                        
                        class properties:
                            contractId = schemas.StrSchema
                            companyId = schemas.StrSchema
                            startDate = schemas.DateSchema
                            
                            
                            class endDate(
                                schemas.DateBase,
                                schemas.StrBase,
                                schemas.NoneBase,
                                schemas.Schema,
                                schemas.NoneStrMixin
                            ):
                            
                            
                                class MetaOapg:
                                    format = 'date'
                            
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[None, str, date, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'endDate':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        _configuration=_configuration,
                                    )
                            
                            
                            class probationEndDate(
                                schemas.DateBase,
                                schemas.StrBase,
                                schemas.NoneBase,
                                schemas.Schema,
                                schemas.NoneStrMixin
                            ):
                            
                            
                                class MetaOapg:
                                    format = 'date'
                            
                            
                                def __new__(
                                    cls,
                                    *args: typing.Union[None, str, date, ],
                                    _configuration: typing.Optional[schemas.Configuration] = None,
                                ) -> 'probationEndDate':
                                    return super().__new__(
                                        cls,
                                        *args,
                                        _configuration=_configuration,
                                    )
                            jobName = schemas.StrSchema
                            
                            
                            class status(
                                schemas.EnumBase,
                                schemas.StrSchema
                            ):
                                
                                @schemas.classproperty
                                def ACTIVE(cls):
                                    return cls("ACTIVE")
                                
                                @schemas.classproperty
                                def ARCHIVED(cls):
                                    return cls("ARCHIVED")
                                
                                @schemas.classproperty
                                def PENDING(cls):
                                    return cls("PENDING")
                            collaboratorId = schemas.StrSchema
                            __annotations__ = {
                                "contractId": contractId,
                                "companyId": companyId,
                                "startDate": startDate,
                                "endDate": endDate,
                                "probationEndDate": probationEndDate,
                                "jobName": jobName,
                                "status": status,
                                "collaboratorId": collaboratorId,
                            }
                    
                    jobName: MetaOapg.properties.jobName
                    companyId: MetaOapg.properties.companyId
                    contractId: MetaOapg.properties.contractId
                    startDate: MetaOapg.properties.startDate
                    collaboratorId: MetaOapg.properties.collaboratorId
                    status: MetaOapg.properties.status
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["contractId"]) -> MetaOapg.properties.contractId: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["endDate"]) -> MetaOapg.properties.endDate: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["probationEndDate"]) -> MetaOapg.properties.probationEndDate: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["jobName"]) -> MetaOapg.properties.jobName: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                    
                    @typing.overload
                    def __getitem__(self, name: typing_extensions.Literal["collaboratorId"]) -> MetaOapg.properties.collaboratorId: ...
                    
                    @typing.overload
                    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
                    
                    def __getitem__(self, name: typing.Union[typing_extensions.Literal["contractId", "companyId", "startDate", "endDate", "probationEndDate", "jobName", "status", "collaboratorId", ], str]):
                        # dict_instance[name] accessor
                        return super().__getitem__(name)
                    
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["contractId"]) -> MetaOapg.properties.contractId: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["companyId"]) -> MetaOapg.properties.companyId: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["startDate"]) -> MetaOapg.properties.startDate: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["endDate"]) -> typing.Union[MetaOapg.properties.endDate, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["probationEndDate"]) -> typing.Union[MetaOapg.properties.probationEndDate, schemas.Unset]: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["jobName"]) -> MetaOapg.properties.jobName: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["status"]) -> MetaOapg.properties.status: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: typing_extensions.Literal["collaboratorId"]) -> MetaOapg.properties.collaboratorId: ...
                    
                    @typing.overload
                    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
                    
                    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["contractId", "companyId", "startDate", "endDate", "probationEndDate", "jobName", "status", "collaboratorId", ], str]):
                        return super().get_item_oapg(name)
                    
                
                    def __new__(
                        cls,
                        *args: typing.Union[dict, frozendict.frozendict, ],
                        jobName: typing.Union[MetaOapg.properties.jobName, str, ],
                        companyId: typing.Union[MetaOapg.properties.companyId, str, ],
                        contractId: typing.Union[MetaOapg.properties.contractId, str, ],
                        startDate: typing.Union[MetaOapg.properties.startDate, str, date, ],
                        collaboratorId: typing.Union[MetaOapg.properties.collaboratorId, str, ],
                        status: typing.Union[MetaOapg.properties.status, str, ],
                        endDate: typing.Union[MetaOapg.properties.endDate, None, str, date, schemas.Unset] = schemas.unset,
                        probationEndDate: typing.Union[MetaOapg.properties.probationEndDate, None, str, date, schemas.Unset] = schemas.unset,
                        _configuration: typing.Optional[schemas.Configuration] = None,
                        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
                    ) -> 'all_of_1':
                        return super().__new__(
                            cls,
                            *args,
                            jobName=jobName,
                            companyId=companyId,
                            contractId=contractId,
                            startDate=startDate,
                            collaboratorId=collaboratorId,
                            status=status,
                            endDate=endDate,
                            probationEndDate=probationEndDate,
                            _configuration=_configuration,
                            **kwargs,
                        )
                
                @classmethod
                @functools.lru_cache()
                def all_of(cls):
                    # we need this here to make our import statements work
                    # we must store _composed_schemas in here so the code is only run
                    # when we invoke this method. If we kept this at the class
                    # level we would get an error because the class level
                    # code would be run when this module is imported, and these composed
                    # classes don't exist yet because their module has not finished
                    # loading
                    return [
                        cls.all_of_0,
                        cls.all_of_1,
                    ]
        
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_0':
                return super().__new__(
                    cls,
                    *args,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        
        class all_of_1(
            schemas.DictSchema
        ):
        
        
            class MetaOapg:
                required = {
                    "providentFundContractIds",
                    "motifRuptureDeContratDsn",
                    "natureContratDsn",
                    "healthInsuranceContractIds",
                    "statutConventionnelDsn",
                    "idcc",
                    "estCadreDirigeant",
                }
                
                class properties:
                    
                    
                    class natureContratDsn(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def POSITIVE_01(cls):
                            return cls("01")
                        
                        @schemas.classproperty
                        def POSITIVE_02(cls):
                            return cls("02")
                        
                        @schemas.classproperty
                        def POSITIVE_03(cls):
                            return cls("03")
                        
                        @schemas.classproperty
                        def POSITIVE_07(cls):
                            return cls("07")
                        
                        @schemas.classproperty
                        def POSITIVE_08(cls):
                            return cls("08")
                        
                        @schemas.classproperty
                        def POSITIVE_09(cls):
                            return cls("09")
                        
                        @schemas.classproperty
                        def POSITIVE_10(cls):
                            return cls("10")
                        
                        @schemas.classproperty
                        def POSITIVE_20(cls):
                            return cls("20")
                        
                        @schemas.classproperty
                        def POSITIVE_21(cls):
                            return cls("21")
                        
                        @schemas.classproperty
                        def POSITIVE_29(cls):
                            return cls("29")
                        
                        @schemas.classproperty
                        def POSITIVE_32(cls):
                            return cls("32")
                        
                        @schemas.classproperty
                        def POSITIVE_50(cls):
                            return cls("50")
                        
                        @schemas.classproperty
                        def POSITIVE_51(cls):
                            return cls("51")
                        
                        @schemas.classproperty
                        def POSITIVE_52(cls):
                            return cls("52")
                        
                        @schemas.classproperty
                        def POSITIVE_53(cls):
                            return cls("53")
                        
                        @schemas.classproperty
                        def POSITIVE_60(cls):
                            return cls("60")
                        
                        @schemas.classproperty
                        def POSITIVE_70(cls):
                            return cls("70")
                        
                        @schemas.classproperty
                        def POSITIVE_80(cls):
                            return cls("80")
                        
                        @schemas.classproperty
                        def POSITIVE_81(cls):
                            return cls("81")
                        
                        @schemas.classproperty
                        def POSITIVE_82(cls):
                            return cls("82")
                        
                        @schemas.classproperty
                        def POSITIVE_89(cls):
                            return cls("89")
                        
                        @schemas.classproperty
                        def POSITIVE_90(cls):
                            return cls("90")
                        
                        @schemas.classproperty
                        def POSITIVE_91(cls):
                            return cls("91")
                        
                        @schemas.classproperty
                        def POSITIVE_92(cls):
                            return cls("92")
                        
                        @schemas.classproperty
                        def POSITIVE_93(cls):
                            return cls("93")
                    
                    
                    class motifRuptureDeContratDsn(
                        schemas.EnumBase,
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        class MetaOapg:
                            enum_value_to_name = {
                                "011": "POSITIVE_011",
                                "012": "POSITIVE_012",
                                "014": "POSITIVE_014",
                                "015": "POSITIVE_015",
                                "020": "POSITIVE_020",
                                "025": "POSITIVE_025",
                                "026": "POSITIVE_026",
                                "031": "POSITIVE_031",
                                "032": "POSITIVE_032",
                                "033": "POSITIVE_033",
                                "034": "POSITIVE_034",
                                "035": "POSITIVE_035",
                                "036": "POSITIVE_036",
                                "037": "POSITIVE_037",
                                "038": "POSITIVE_038",
                                "039": "POSITIVE_039",
                                "043": "POSITIVE_043",
                                "058": "POSITIVE_058",
                                "059": "POSITIVE_059",
                                "065": "POSITIVE_065",
                                "066": "POSITIVE_066",
                                "070": "POSITIVE_070",
                                "071": "POSITIVE_071",
                                "081": "POSITIVE_081",
                                "082": "POSITIVE_082",
                                "083": "POSITIVE_083",
                                "084": "POSITIVE_084",
                                "085": "POSITIVE_085",
                                "086": "POSITIVE_086",
                                "087": "POSITIVE_087",
                                "088": "POSITIVE_088",
                                "089": "POSITIVE_089",
                                "091": "POSITIVE_091",
                                "092": "POSITIVE_092",
                                "093": "POSITIVE_093",
                                "094": "POSITIVE_094",
                                "095": "POSITIVE_095",
                                "096": "POSITIVE_096",
                                "097": "POSITIVE_097",
                                "098": "POSITIVE_098",
                                "099": "POSITIVE_099",
                                "100": "POSITIVE_100",
                                "110": "POSITIVE_110",
                                "111": "POSITIVE_111",
                                "112": "POSITIVE_112",
                                "113": "POSITIVE_113",
                                "114": "POSITIVE_114",
                                "115": "POSITIVE_115",
                                "116": "POSITIVE_116",
                                "998": "POSITIVE_998",
                                "999": "POSITIVE_999",
                                None: "NONE",
                            }
                        
                        @schemas.classproperty
                        def POSITIVE_011(cls):
                            return cls("011")
                        
                        @schemas.classproperty
                        def POSITIVE_012(cls):
                            return cls("012")
                        
                        @schemas.classproperty
                        def POSITIVE_014(cls):
                            return cls("014")
                        
                        @schemas.classproperty
                        def POSITIVE_015(cls):
                            return cls("015")
                        
                        @schemas.classproperty
                        def POSITIVE_020(cls):
                            return cls("020")
                        
                        @schemas.classproperty
                        def POSITIVE_025(cls):
                            return cls("025")
                        
                        @schemas.classproperty
                        def POSITIVE_026(cls):
                            return cls("026")
                        
                        @schemas.classproperty
                        def POSITIVE_031(cls):
                            return cls("031")
                        
                        @schemas.classproperty
                        def POSITIVE_032(cls):
                            return cls("032")
                        
                        @schemas.classproperty
                        def POSITIVE_033(cls):
                            return cls("033")
                        
                        @schemas.classproperty
                        def POSITIVE_034(cls):
                            return cls("034")
                        
                        @schemas.classproperty
                        def POSITIVE_035(cls):
                            return cls("035")
                        
                        @schemas.classproperty
                        def POSITIVE_036(cls):
                            return cls("036")
                        
                        @schemas.classproperty
                        def POSITIVE_037(cls):
                            return cls("037")
                        
                        @schemas.classproperty
                        def POSITIVE_038(cls):
                            return cls("038")
                        
                        @schemas.classproperty
                        def POSITIVE_039(cls):
                            return cls("039")
                        
                        @schemas.classproperty
                        def POSITIVE_043(cls):
                            return cls("043")
                        
                        @schemas.classproperty
                        def POSITIVE_058(cls):
                            return cls("058")
                        
                        @schemas.classproperty
                        def POSITIVE_059(cls):
                            return cls("059")
                        
                        @schemas.classproperty
                        def POSITIVE_065(cls):
                            return cls("065")
                        
                        @schemas.classproperty
                        def POSITIVE_066(cls):
                            return cls("066")
                        
                        @schemas.classproperty
                        def POSITIVE_070(cls):
                            return cls("070")
                        
                        @schemas.classproperty
                        def POSITIVE_071(cls):
                            return cls("071")
                        
                        @schemas.classproperty
                        def POSITIVE_081(cls):
                            return cls("081")
                        
                        @schemas.classproperty
                        def POSITIVE_082(cls):
                            return cls("082")
                        
                        @schemas.classproperty
                        def POSITIVE_083(cls):
                            return cls("083")
                        
                        @schemas.classproperty
                        def POSITIVE_084(cls):
                            return cls("084")
                        
                        @schemas.classproperty
                        def POSITIVE_085(cls):
                            return cls("085")
                        
                        @schemas.classproperty
                        def POSITIVE_086(cls):
                            return cls("086")
                        
                        @schemas.classproperty
                        def POSITIVE_087(cls):
                            return cls("087")
                        
                        @schemas.classproperty
                        def POSITIVE_088(cls):
                            return cls("088")
                        
                        @schemas.classproperty
                        def POSITIVE_089(cls):
                            return cls("089")
                        
                        @schemas.classproperty
                        def POSITIVE_091(cls):
                            return cls("091")
                        
                        @schemas.classproperty
                        def POSITIVE_092(cls):
                            return cls("092")
                        
                        @schemas.classproperty
                        def POSITIVE_093(cls):
                            return cls("093")
                        
                        @schemas.classproperty
                        def POSITIVE_094(cls):
                            return cls("094")
                        
                        @schemas.classproperty
                        def POSITIVE_095(cls):
                            return cls("095")
                        
                        @schemas.classproperty
                        def POSITIVE_096(cls):
                            return cls("096")
                        
                        @schemas.classproperty
                        def POSITIVE_097(cls):
                            return cls("097")
                        
                        @schemas.classproperty
                        def POSITIVE_098(cls):
                            return cls("098")
                        
                        @schemas.classproperty
                        def POSITIVE_099(cls):
                            return cls("099")
                        
                        @schemas.classproperty
                        def POSITIVE_100(cls):
                            return cls("100")
                        
                        @schemas.classproperty
                        def POSITIVE_110(cls):
                            return cls("110")
                        
                        @schemas.classproperty
                        def POSITIVE_111(cls):
                            return cls("111")
                        
                        @schemas.classproperty
                        def POSITIVE_112(cls):
                            return cls("112")
                        
                        @schemas.classproperty
                        def POSITIVE_113(cls):
                            return cls("113")
                        
                        @schemas.classproperty
                        def POSITIVE_114(cls):
                            return cls("114")
                        
                        @schemas.classproperty
                        def POSITIVE_115(cls):
                            return cls("115")
                        
                        @schemas.classproperty
                        def POSITIVE_116(cls):
                            return cls("116")
                        
                        @schemas.classproperty
                        def POSITIVE_998(cls):
                            return cls("998")
                        
                        @schemas.classproperty
                        def POSITIVE_999(cls):
                            return cls("999")
                        
                        @schemas.classproperty
                        def NONE(cls):
                            return cls(None)
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'motifRuptureDeContratDsn':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class statutConventionnelDsn(
                        schemas.EnumBase,
                        schemas.StrSchema
                    ):
                        
                        @schemas.classproperty
                        def POSITIVE_01(cls):
                            return cls("01")
                        
                        @schemas.classproperty
                        def POSITIVE_02(cls):
                            return cls("02")
                        
                        @schemas.classproperty
                        def POSITIVE_03(cls):
                            return cls("03")
                        
                        @schemas.classproperty
                        def POSITIVE_04(cls):
                            return cls("04")
                        
                        @schemas.classproperty
                        def POSITIVE_05(cls):
                            return cls("05")
                        
                        @schemas.classproperty
                        def POSITIVE_06(cls):
                            return cls("06")
                        
                        @schemas.classproperty
                        def POSITIVE_07(cls):
                            return cls("07")
                        
                        @schemas.classproperty
                        def POSITIVE_08(cls):
                            return cls("08")
                        
                        @schemas.classproperty
                        def POSITIVE_09(cls):
                            return cls("09")
                        
                        @schemas.classproperty
                        def POSITIVE_10(cls):
                            return cls("10")
                    
                    
                    class idcc(
                        schemas.StrBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneStrMixin
                    ):
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[None, str, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'idcc':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class healthInsuranceContractIds(
                        schemas.ListBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneTupleMixin
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[list, tuple, None, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'healthInsuranceContractIds':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    
                    
                    class providentFundContractIds(
                        schemas.ListBase,
                        schemas.NoneBase,
                        schemas.Schema,
                        schemas.NoneTupleMixin
                    ):
                    
                    
                        class MetaOapg:
                            items = schemas.StrSchema
                    
                    
                        def __new__(
                            cls,
                            *args: typing.Union[list, tuple, None, ],
                            _configuration: typing.Optional[schemas.Configuration] = None,
                        ) -> 'providentFundContractIds':
                            return super().__new__(
                                cls,
                                *args,
                                _configuration=_configuration,
                            )
                    estCadreDirigeant = schemas.BoolSchema
                    __annotations__ = {
                        "natureContratDsn": natureContratDsn,
                        "motifRuptureDeContratDsn": motifRuptureDeContratDsn,
                        "statutConventionnelDsn": statutConventionnelDsn,
                        "idcc": idcc,
                        "healthInsuranceContractIds": healthInsuranceContractIds,
                        "providentFundContractIds": providentFundContractIds,
                        "estCadreDirigeant": estCadreDirigeant,
                    }
            
            providentFundContractIds: MetaOapg.properties.providentFundContractIds
            motifRuptureDeContratDsn: MetaOapg.properties.motifRuptureDeContratDsn
            natureContratDsn: MetaOapg.properties.natureContratDsn
            healthInsuranceContractIds: MetaOapg.properties.healthInsuranceContractIds
            statutConventionnelDsn: MetaOapg.properties.statutConventionnelDsn
            idcc: MetaOapg.properties.idcc
            estCadreDirigeant: MetaOapg.properties.estCadreDirigeant
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["natureContratDsn"]) -> MetaOapg.properties.natureContratDsn: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["motifRuptureDeContratDsn"]) -> MetaOapg.properties.motifRuptureDeContratDsn: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["statutConventionnelDsn"]) -> MetaOapg.properties.statutConventionnelDsn: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["idcc"]) -> MetaOapg.properties.idcc: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["healthInsuranceContractIds"]) -> MetaOapg.properties.healthInsuranceContractIds: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["providentFundContractIds"]) -> MetaOapg.properties.providentFundContractIds: ...
            
            @typing.overload
            def __getitem__(self, name: typing_extensions.Literal["estCadreDirigeant"]) -> MetaOapg.properties.estCadreDirigeant: ...
            
            @typing.overload
            def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
            
            def __getitem__(self, name: typing.Union[typing_extensions.Literal["natureContratDsn", "motifRuptureDeContratDsn", "statutConventionnelDsn", "idcc", "healthInsuranceContractIds", "providentFundContractIds", "estCadreDirigeant", ], str]):
                # dict_instance[name] accessor
                return super().__getitem__(name)
            
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["natureContratDsn"]) -> MetaOapg.properties.natureContratDsn: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["motifRuptureDeContratDsn"]) -> MetaOapg.properties.motifRuptureDeContratDsn: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["statutConventionnelDsn"]) -> MetaOapg.properties.statutConventionnelDsn: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["idcc"]) -> MetaOapg.properties.idcc: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["healthInsuranceContractIds"]) -> MetaOapg.properties.healthInsuranceContractIds: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["providentFundContractIds"]) -> MetaOapg.properties.providentFundContractIds: ...
            
            @typing.overload
            def get_item_oapg(self, name: typing_extensions.Literal["estCadreDirigeant"]) -> MetaOapg.properties.estCadreDirigeant: ...
            
            @typing.overload
            def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
            
            def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["natureContratDsn", "motifRuptureDeContratDsn", "statutConventionnelDsn", "idcc", "healthInsuranceContractIds", "providentFundContractIds", "estCadreDirigeant", ], str]):
                return super().get_item_oapg(name)
            
        
            def __new__(
                cls,
                *args: typing.Union[dict, frozendict.frozendict, ],
                providentFundContractIds: typing.Union[MetaOapg.properties.providentFundContractIds, list, tuple, None, ],
                motifRuptureDeContratDsn: typing.Union[MetaOapg.properties.motifRuptureDeContratDsn, None, str, ],
                natureContratDsn: typing.Union[MetaOapg.properties.natureContratDsn, str, ],
                healthInsuranceContractIds: typing.Union[MetaOapg.properties.healthInsuranceContractIds, list, tuple, None, ],
                statutConventionnelDsn: typing.Union[MetaOapg.properties.statutConventionnelDsn, str, ],
                idcc: typing.Union[MetaOapg.properties.idcc, None, str, ],
                estCadreDirigeant: typing.Union[MetaOapg.properties.estCadreDirigeant, bool, ],
                _configuration: typing.Optional[schemas.Configuration] = None,
                **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
            ) -> 'all_of_1':
                return super().__new__(
                    cls,
                    *args,
                    providentFundContractIds=providentFundContractIds,
                    motifRuptureDeContratDsn=motifRuptureDeContratDsn,
                    natureContratDsn=natureContratDsn,
                    healthInsuranceContractIds=healthInsuranceContractIds,
                    statutConventionnelDsn=statutConventionnelDsn,
                    idcc=idcc,
                    estCadreDirigeant=estCadreDirigeant,
                    _configuration=_configuration,
                    **kwargs,
                )
        
        @classmethod
        @functools.lru_cache()
        def all_of(cls):
            # we need this here to make our import statements work
            # we must store _composed_schemas in here so the code is only run
            # when we invoke this method. If we kept this at the class
            # level we would get an error because the class level
            # code would be run when this module is imported, and these composed
            # classes don't exist yet because their module has not finished
            # loading
            return [
                cls.all_of_0,
                cls.all_of_1,
            ]


    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, bool, None, list, tuple, bytes, io.FileIO, io.BufferedReader, ],
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'ContractFr':
        return super().__new__(
            cls,
            *args,
            _configuration=_configuration,
            **kwargs,
        )
